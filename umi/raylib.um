/**
 * raylib-umka v0.0.3 - Umka bindings for raylib.
 *
 * https://github.com/RobLoach/raylib-umka
 *
 * NOTE: Do not edit this file, as it is automatically generated.
 *
 * LICENSE: zlib/libpng
 */

// Structures
type (
  Vector2* = struct {
    x: real32
    y: real32
  }
  Vector3* = struct {
    x: real32
    y: real32
    z: real32
  }
  Vector4* = struct {
    x: real32
    y: real32
    z: real32
    w: real32
  }
  Matrix* = struct {
    m0: real32
    m4: real32
    m8: real32
    m12: real32
    m1: real32
    m5: real32
    m9: real32
    m13: real32
    m2: real32
    m6: real32
    m10: real32
    m14: real32
    m3: real32
    m7: real32
    m11: real32
    m15: real32
  }
  Color* = struct {
    r: uint8
    g: uint8
    b: uint8
    a: uint8
  }
  Rectangle* = struct {
    x: real32
    y: real32
    width: real32
    height: real32
  }
  Image* = struct {
    data: ^void
    width: int32
    height: int32
    mipmaps: int32
    format: int32
  }
  Texture* = struct {
    id: uint32
    width: int32
    height: int32
    mipmaps: int32
    format: int32
  }
  RenderTexture* = struct {
    id: uint32
    texture: Texture
    depth: Texture
  }
  NPatchInfo* = struct {
    source: Rectangle
    left: int32
    top: int32
    right: int32
    bottom: int32
    layout: int32
  }
  GlyphInfo* = struct {
    value: int32
    offsetX: int32
    offsetY: int32
    advanceX: int32
    image: Image
  }
  Font* = struct {
    baseSize: int32
    glyphCount: int32
    glyphPadding: int32
    texture: Texture
    recs: ^Rectangle
    glyphs: ^GlyphInfo
  }
  Camera3D* = struct {
    position: Vector3
    target: Vector3
    up: Vector3
    fovy: real32
    projection: int32
  }
  Camera2D* = struct {
    offset: Vector2
    target: Vector2
    rotation: real32
    zoom: real32
  }
  Mesh* = struct {
    vertexCount: int32
    triangleCount: int32
    vertices: ^real32
    texcoords: ^real32
    texcoords2: ^real32
    normals: ^real32
    tangents: ^real32
    colors: ^uint8
    indices: ^uint16
    animVertices: ^real32
    animNormals: ^real32
    boneIds: ^uint8
    boneWeights: ^real32
    vaoId: uint32
    vboId: ^uint32
  }
  Shader* = struct {
    id: uint32
    locs: ^int32
  }
  MaterialMap* = struct {
    texture: Texture
    color: Color
    value: real32
  }
  Material* = struct {
    shader: Shader
    maps: ^MaterialMap
    params: [4]real32
  }
  Transform* = struct {
    translation: Vector3
    rotation: Vector4
    scale: Vector3
  }
  BoneInfo* = struct {
    name: [32]char
    parent: int32
  }
  Model* = struct {
    transform: Matrix
    meshCount: int32
    materialCount: int32
    meshes: ^Mesh
    materials: ^Material
    meshMaterial: ^int32
    boneCount: int32
    bones: ^BoneInfo
    bindPose: ^Transform
  }
  ModelAnimation* = struct {
    boneCount: int32
    frameCount: int32
    bones: ^BoneInfo
    framePoses: ^void
  }
  Ray* = struct {
    position: Vector3
    direction: Vector3
  }
  RayCollision* = struct {
    hit: bool
    distance: real32
    point: Vector3
    normal: Vector3
  }
  BoundingBox* = struct {
    min: Vector3
    max: Vector3
  }
  Wave* = struct {
    frameCount: uint32
    sampleRate: uint32
    sampleSize: uint32
    channels: uint32
    data: ^void
  }
  AudioStream* = struct {
    buffer: ^void
    processor: ^void
    sampleRate: uint32
    sampleSize: uint32
    channels: uint32
  }
  Sound* = struct {
    stream: AudioStream
    frameCount: uint32
  }
  Music* = struct {
    stream: AudioStream
    frameCount: uint32
    looping: bool
    ctxType: int32
    ctxData: ^void
  }
  VrDeviceInfo* = struct {
    hResolution: int32
    vResolution: int32
    hScreenSize: real32
    vScreenSize: real32
    vScreenCenter: real32
    eyeToScreenDistance: real32
    lensSeparationDistance: real32
    interpupillaryDistance: real32
    lensDistortionValues: [4]real32
    chromaAbCorrection: [4]real32
  }
  VrStereoConfig* = struct {
    projection: [2]Matrix
    viewOffset: [2]Matrix
    leftLensCenter: [2]real32
    rightLensCenter: [2]real32
    leftScreenCenter: [2]real32
    rightScreenCenter: [2]real32
    scale: [2]real32
    scaleIn: [2]real32
  }
  FilePathList* = struct {
    capacity: uint32
    count: uint32
    paths: ^str
  }
  float3* = struct {
    v: [3]real32
  }
  float16* = struct {
    v: [16]real32
  }
  rlDrawCall* = struct {
    mode: int32
    vertexCount: int32
    vertexAlignment: int32
    textureId: uint32
  }
)

// Callbacks
type (
// Skipped TraceLogCallback
    LoadFileDataCallback = fn(fileName: str, bytesRead: ^uint32): ^uint8
    SaveFileDataCallback = fn(fileName: str, data: ^void, bytesToWrite: uint32): bool
    LoadFileTextCallback = fn(fileName: str): str
    SaveFileTextCallback = fn(fileName: str, text: str): bool
    AudioCallback = fn(bufferData: ^void, frames: uint32)
)

// Functions
fn TraceLog*(errorType: int , message: str)
fn InitWindow*(width: int32, height: int32, title: str)
fn WindowShouldClose*(): bool
fn CloseWindow*()
fn IsWindowReady*(): bool
fn IsWindowFullscreen*(): bool
fn IsWindowHidden*(): bool
fn IsWindowMinimized*(): bool
fn IsWindowMaximized*(): bool
fn IsWindowFocused*(): bool
fn IsWindowResized*(): bool
fn IsWindowState*(flag: uint32): bool
fn SetWindowState*(flags: uint32)
fn ClearWindowState*(flags: uint32)
fn ToggleFullscreen*()
fn MaximizeWindow*()
fn MinimizeWindow*()
fn RestoreWindow*()
fn SetWindowIcon*(image: Image)
fn SetWindowTitle*(title: str)
fn SetWindowPosition*(x: int32, y: int32)
fn SetWindowMonitor*(monitor: int32)
fn SetWindowMinSize*(width: int32, height: int32)
fn SetWindowSize*(width: int32, height: int32)
fn SetWindowOpacity*(opacity: real32)
fn GetWindowHandle*(): ^void
fn GetScreenWidth*(): int32
fn GetScreenHeight*(): int32
fn GetRenderWidth*(): int32
fn GetRenderHeight*(): int32
fn GetMonitorCount*(): int32
fn GetCurrentMonitor*(): int32
fn GetMonitorPosition*(monitor: int32): Vector2
fn GetMonitorWidth*(monitor: int32): int32
fn GetMonitorHeight*(monitor: int32): int32
fn GetMonitorPhysicalWidth*(monitor: int32): int32
fn GetMonitorPhysicalHeight*(monitor: int32): int32
fn GetMonitorRefreshRate*(monitor: int32): int32
fn GetWindowPosition*(): Vector2
fn GetWindowScaleDPI*(): Vector2
fn GetMonitorName*(monitor: int32): str
fn SetClipboardText*(text: str)
fn GetClipboardText*(): str
fn EnableEventWaiting*()
fn DisableEventWaiting*()
fn SwapScreenBuffer*()
fn PollInputEvents*()
fn WaitTime*(seconds: real)
fn ShowCursor*()
fn HideCursor*()
fn IsCursorHidden*(): bool
fn EnableCursor*()
fn DisableCursor*()
fn IsCursorOnScreen*(): bool
fn ClearBackground*(color: Color)
fn BeginDrawing*()
fn EndDrawing*()
fn BeginMode2D*(camera: Camera2D)
fn EndMode2D*()
fn BeginMode3D*(camera: Camera3D)
fn EndMode3D*()
fn BeginTextureMode*(target: RenderTexture)
fn EndTextureMode*()
fn BeginShaderMode*(shader: Shader)
fn EndShaderMode*()
fn BeginBlendMode*(mode: int32)
fn EndBlendMode*()
fn BeginScissorMode*(x: int32, y: int32, width: int32, height: int32)
fn EndScissorMode*()
fn BeginVrStereoMode*(config: VrStereoConfig)
fn EndVrStereoMode*()
fn LoadVrStereoConfig*(device: VrDeviceInfo): VrStereoConfig
fn UnloadVrStereoConfig*(config: VrStereoConfig)
fn LoadShader*(vsFileName: str, fsFileName: str): Shader
fn LoadShaderFromMemory*(vsCode: str, fsCode: str): Shader
fn GetShaderLocation*(shader: Shader, uniformName: str): int32
fn GetShaderLocationAttrib*(shader: Shader, attribName: str): int32
fn SetShaderValue*(shader: Shader, locIndex: int32, value: ^void, uniformType: int32)
fn SetShaderValueV*(shader: Shader, locIndex: int32, value: ^void, uniformType: int32, count: int32)
fn SetShaderValueMatrix*(shader: Shader, locIndex: int32, mat: Matrix)
fn SetShaderValueTexture*(shader: Shader, locIndex: int32, texture: Texture)
fn UnloadShader*(shader: Shader)
fn GetMouseRay*(mousePosition: Vector2, camera: Camera3D): Ray
fn GetCameraMatrix*(camera: Camera3D): Matrix
fn GetCameraMatrix2D*(camera: Camera2D): Matrix
fn GetWorldToScreen*(position: Vector3, camera: Camera3D): Vector2
fn GetScreenToWorld2D*(position: Vector2, camera: Camera2D): Vector2
fn GetWorldToScreenEx*(position: Vector3, camera: Camera3D, width: int32, height: int32): Vector2
fn GetWorldToScreen2D*(position: Vector2, camera: Camera2D): Vector2
fn SetTargetFPS*(fps: int32)
fn GetFPS*(): int32
fn GetFrameTime*(): real32
fn GetTime*(): real
fn GetRandomValue*(min: int32, max: int32): int32
fn SetRandomSeed*(seed: uint32)
fn TakeScreenshot*(fileName: str)
fn SetConfigFlags*(flags: uint32)
// Skipping TraceLog
fn SetTraceLogLevel*(logLevel: int32)
fn MemAlloc*(size: int32): ^void
fn MemRealloc*(ptr: ^void, size: int32): ^void
fn MemFree*(ptr: ^void)
fn OpenURL*(url: str)
// Skipping SetTraceLogCallback
// Skipping SetLoadFileDataCallback
// Skipping SetSaveFileDataCallback
// Skipping SetLoadFileTextCallback
// Skipping SetSaveFileTextCallback
fn LoadFileData*(fileName: str, bytesRead: ^uint32): ^uint8
fn UnloadFileData*(data: ^uint8)
fn SaveFileData*(fileName: str, data: ^void, bytesToWrite: uint32): bool
fn ExportDataAsCode*(data: str, size: uint32, fileName: str): bool
fn LoadFileText*(fileName: str): str
fn UnloadFileText*(text: str)
fn SaveFileText*(fileName: str, text: str): bool
fn FileExists*(fileName: str): bool
fn DirectoryExists*(dirPath: str): bool
fn IsFileExtension*(fileName: str, ext: str): bool
fn GetFileLength*(fileName: str): int32
fn GetFileExtension*(fileName: str): str
fn GetFileName*(filePath: str): str
fn GetFileNameWithoutExt*(filePath: str): str
fn GetDirectoryPath*(filePath: str): str
fn GetPrevDirectoryPath*(dirPath: str): str
fn GetWorkingDirectory*(): str
fn GetApplicationDirectory*(): str
fn ChangeDirectory*(dir: str): bool
fn IsPathFile*(path: str): bool
fn LoadDirectoryFiles*(dirPath: str): FilePathList
fn LoadDirectoryFilesEx*(basePath: str, filter: str, scanSubdirs: bool): FilePathList
fn UnloadDirectoryFiles*(files: FilePathList)
fn IsFileDropped*(): bool
fn LoadDroppedFiles*(): FilePathList
fn UnloadDroppedFiles*(files: FilePathList)
fn GetFileModTime*(fileName: str): int
fn CompressData*(data: ^uint8, dataSize: int32, compDataSize: ^int32): ^uint8
fn DecompressData*(compData: ^uint8, compDataSize: int32, dataSize: ^int32): ^uint8
fn EncodeDataBase64*(data: ^uint8, dataSize: int32, outputSize: ^int32): str
fn DecodeDataBase64*(data: ^uint8, outputSize: ^int32): ^uint8
fn IsKeyPressed*(key: int32): bool
fn IsKeyDown*(key: int32): bool
fn IsKeyReleased*(key: int32): bool
fn IsKeyUp*(key: int32): bool
fn SetExitKey*(key: int32)
fn GetKeyPressed*(): int32
fn GetCharPressed*(): int32
fn IsGamepadAvailable*(gamepad: int32): bool
fn GetGamepadName*(gamepad: int32): str
fn IsGamepadButtonPressed*(gamepad: int32, button: int32): bool
fn IsGamepadButtonDown*(gamepad: int32, button: int32): bool
fn IsGamepadButtonReleased*(gamepad: int32, button: int32): bool
fn IsGamepadButtonUp*(gamepad: int32, button: int32): bool
fn GetGamepadButtonPressed*(): int32
fn GetGamepadAxisCount*(gamepad: int32): int32
fn GetGamepadAxisMovement*(gamepad: int32, axis: int32): real32
fn SetGamepadMappings*(mappings: str): int32
fn IsMouseButtonPressed*(button: int32): bool
fn IsMouseButtonDown*(button: int32): bool
fn IsMouseButtonReleased*(button: int32): bool
fn IsMouseButtonUp*(button: int32): bool
fn GetMouseX*(): int32
fn GetMouseY*(): int32
fn GetMousePosition*(): Vector2
fn GetMouseDelta*(): Vector2
fn SetMousePosition*(x: int32, y: int32)
fn SetMouseOffset*(offsetX: int32, offsetY: int32)
fn SetMouseScale*(scaleX: real32, scaleY: real32)
fn GetMouseWheelMove*(): real32
fn GetMouseWheelMoveV*(): Vector2
fn SetMouseCursor*(cursor: int32)
fn GetTouchX*(): int32
fn GetTouchY*(): int32
fn GetTouchPosition*(index: int32): Vector2
fn GetTouchPointId*(index: int32): int32
fn GetTouchPointCount*(): int32
fn SetGesturesEnabled*(flags: uint32)
fn IsGestureDetected*(gesture: int32): bool
fn GetGestureDetected*(): int32
fn GetGestureHoldDuration*(): real32
fn GetGestureDragVector*(): Vector2
fn GetGestureDragAngle*(): real32
fn GetGesturePinchVector*(): Vector2
fn GetGesturePinchAngle*(): real32
fn SetCameraMode*(camera: Camera3D, mode: int32)
fn UpdateCamera*(camera: ^Camera3D)
fn SetCameraPanControl*(keyPan: int32)
fn SetCameraAltControl*(keyAlt: int32)
fn SetCameraSmoothZoomControl*(keySmoothZoom: int32)
fn SetCameraMoveControls*(keyFront: int32, keyBack: int32, keyRight: int32, keyLeft: int32, keyUp: int32, keyDown: int32)
fn SetShapesTexture*(texture: Texture, source: Rectangle)
fn DrawPixel*(posX: int32, posY: int32, color: Color)
fn DrawPixelV*(position: Vector2, color: Color)
fn DrawLine*(startPosX: int32, startPosY: int32, endPosX: int32, endPosY: int32, color: Color)
fn DrawLineV*(startPos: Vector2, endPos: Vector2, color: Color)
fn DrawLineEx*(startPos: Vector2, endPos: Vector2, thick: real32, color: Color)
fn DrawLineBezier*(startPos: Vector2, endPos: Vector2, thick: real32, color: Color)
fn DrawLineBezierQuad*(startPos: Vector2, endPos: Vector2, controlPos: Vector2, thick: real32, color: Color)
fn DrawLineBezierCubic*(startPos: Vector2, endPos: Vector2, startControlPos: Vector2, endControlPos: Vector2, thick: real32, color: Color)
fn DrawLineStrip*(points: ^Vector2, pointCount: int32, color: Color)
fn DrawCircle*(centerX: int32, centerY: int32, radius: real32, color: Color)
fn DrawCircleSector*(center: Vector2, radius: real32, startAngle: real32, endAngle: real32, segments: int32, color: Color)
fn DrawCircleSectorLines*(center: Vector2, radius: real32, startAngle: real32, endAngle: real32, segments: int32, color: Color)
fn DrawCircleGradient*(centerX: int32, centerY: int32, radius: real32, color1: Color, color2: Color)
fn DrawCircleV*(center: Vector2, radius: real32, color: Color)
fn DrawCircleLines*(centerX: int32, centerY: int32, radius: real32, color: Color)
fn DrawEllipse*(centerX: int32, centerY: int32, radiusH: real32, radiusV: real32, color: Color)
fn DrawEllipseLines*(centerX: int32, centerY: int32, radiusH: real32, radiusV: real32, color: Color)
fn DrawRing*(center: Vector2, innerRadius: real32, outerRadius: real32, startAngle: real32, endAngle: real32, segments: int32, color: Color)
fn DrawRingLines*(center: Vector2, innerRadius: real32, outerRadius: real32, startAngle: real32, endAngle: real32, segments: int32, color: Color)
fn DrawRectangle*(posX: int32, posY: int32, width: int32, height: int32, color: Color)
fn DrawRectangleV*(position: Vector2, size: Vector2, color: Color)
fn DrawRectangleRec*(rec: Rectangle, color: Color)
fn DrawRectanglePro*(rec: Rectangle, origin: Vector2, rotation: real32, color: Color)
fn DrawRectangleGradientV*(posX: int32, posY: int32, width: int32, height: int32, color1: Color, color2: Color)
fn DrawRectangleGradientH*(posX: int32, posY: int32, width: int32, height: int32, color1: Color, color2: Color)
fn DrawRectangleGradientEx*(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4: Color)
fn DrawRectangleLines*(posX: int32, posY: int32, width: int32, height: int32, color: Color)
fn DrawRectangleLinesEx*(rec: Rectangle, lineThick: real32, color: Color)
fn DrawRectangleRounded*(rec: Rectangle, roundness: real32, segments: int32, color: Color)
fn DrawRectangleRoundedLines*(rec: Rectangle, roundness: real32, segments: int32, lineThick: real32, color: Color)
fn DrawTriangle*(v1: Vector2, v2: Vector2, v3: Vector2, color: Color)
fn DrawTriangleLines*(v1: Vector2, v2: Vector2, v3: Vector2, color: Color)
fn DrawTriangleFan*(points: ^Vector2, pointCount: int32, color: Color)
fn DrawTriangleStrip*(points: ^Vector2, pointCount: int32, color: Color)
fn DrawPoly*(center: Vector2, sides: int32, radius: real32, rotation: real32, color: Color)
fn DrawPolyLines*(center: Vector2, sides: int32, radius: real32, rotation: real32, color: Color)
fn DrawPolyLinesEx*(center: Vector2, sides: int32, radius: real32, rotation: real32, lineThick: real32, color: Color)
fn CheckCollisionRecs*(rec1: Rectangle, rec2: Rectangle): bool
fn CheckCollisionCircles*(center1: Vector2, radius1: real32, center2: Vector2, radius2: real32): bool
fn CheckCollisionCircleRec*(center: Vector2, radius: real32, rec: Rectangle): bool
fn CheckCollisionPointRec*(point: Vector2, rec: Rectangle): bool
fn CheckCollisionPointCircle*(point: Vector2, center: Vector2, radius: real32): bool
fn CheckCollisionPointTriangle*(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2): bool
fn CheckCollisionLines*(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPos2: Vector2, collisionPoint: ^Vector2): bool
fn CheckCollisionPointLine*(point: Vector2, p1: Vector2, p2: Vector2, threshold: int32): bool
fn GetCollisionRec*(rec1: Rectangle, rec2: Rectangle): Rectangle
fn LoadImage*(fileName: str): Image
fn LoadImageRaw*(fileName: str, width: int32, height: int32, format: int32, headerSize: int32): Image
fn LoadImageAnim*(fileName: str, frames: ^int32): Image
fn LoadImageFromMemory*(fileType: str, fileData: ^uint8, dataSize: int32): Image
fn LoadImageFromTexture*(texture: Texture): Image
fn LoadImageFromScreen*(): Image
fn UnloadImage*(image: Image)
fn ExportImage*(image: Image, fileName: str): bool
fn ExportImageAsCode*(image: Image, fileName: str): bool
fn GenImageColor*(width: int32, height: int32, color: Color): Image
fn GenImageGradientV*(width: int32, height: int32, top: Color, bottom: Color): Image
fn GenImageGradientH*(width: int32, height: int32, left: Color, right: Color): Image
fn GenImageGradientRadial*(width: int32, height: int32, density: real32, inner: Color, outer: Color): Image
fn GenImageChecked*(width: int32, height: int32, checksX: int32, checksY: int32, col1: Color, col2: Color): Image
fn GenImageWhiteNoise*(width: int32, height: int32, factor: real32): Image
fn GenImageCellular*(width: int32, height: int32, tileSize: int32): Image
fn ImageCopy*(image: Image): Image
fn ImageFromImage*(image: Image, rec: Rectangle): Image
fn ImageText*(text: str, fontSize: int32, color: Color): Image
fn ImageTextEx*(font: Font, text: str, fontSize: real32, spacing: real32, tint: Color): Image
fn ImageFormat*(image: ^Image, newFormat: int32)
fn ImageToPOT*(image: ^Image, fill: Color)
fn ImageCrop*(image: ^Image, crop: Rectangle)
fn ImageAlphaCrop*(image: ^Image, threshold: real32)
fn ImageAlphaClear*(image: ^Image, color: Color, threshold: real32)
fn ImageAlphaMask*(image: ^Image, alphaMask: Image)
fn ImageAlphaPremultiply*(image: ^Image)
fn ImageResize*(image: ^Image, newWidth: int32, newHeight: int32)
fn ImageResizeNN*(image: ^Image, newWidth: int32, newHeight: int32)
fn ImageResizeCanvas*(image: ^Image, newWidth: int32, newHeight: int32, offsetX: int32, offsetY: int32, fill: Color)
fn ImageMipmaps*(image: ^Image)
fn ImageDither*(image: ^Image, rBpp: int32, gBpp: int32, bBpp: int32, aBpp: int32)
fn ImageFlipVertical*(image: ^Image)
fn ImageFlipHorizontal*(image: ^Image)
fn ImageRotateCW*(image: ^Image)
fn ImageRotateCCW*(image: ^Image)
fn ImageColorTint*(image: ^Image, color: Color)
fn ImageColorInvert*(image: ^Image)
fn ImageColorGrayscale*(image: ^Image)
fn ImageColorContrast*(image: ^Image, contrast: real32)
fn ImageColorBrightness*(image: ^Image, brightness: int32)
fn ImageColorReplace*(image: ^Image, color: Color, replace: Color)
fn LoadImageColors*(image: Image): ^Color
fn LoadImagePalette*(image: Image, maxPaletteSize: int32, colorCount: ^int32): ^Color
fn UnloadImageColors*(colors: ^Color)
fn UnloadImagePalette*(colors: ^Color)
fn GetImageAlphaBorder*(image: Image, threshold: real32): Rectangle
fn GetImageColor*(image: Image, x: int32, y: int32): Color
fn ImageClearBackground*(dst: ^Image, color: Color)
fn ImageDrawPixel*(dst: ^Image, posX: int32, posY: int32, color: Color)
fn ImageDrawPixelV*(dst: ^Image, position: Vector2, color: Color)
fn ImageDrawLine*(dst: ^Image, startPosX: int32, startPosY: int32, endPosX: int32, endPosY: int32, color: Color)
fn ImageDrawLineV*(dst: ^Image, start: Vector2, end: Vector2, color: Color)
fn ImageDrawCircle*(dst: ^Image, centerX: int32, centerY: int32, radius: int32, color: Color)
fn ImageDrawCircleV*(dst: ^Image, center: Vector2, radius: int32, color: Color)
fn ImageDrawRectangle*(dst: ^Image, posX: int32, posY: int32, width: int32, height: int32, color: Color)
fn ImageDrawRectangleV*(dst: ^Image, position: Vector2, size: Vector2, color: Color)
fn ImageDrawRectangleRec*(dst: ^Image, rec: Rectangle, color: Color)
fn ImageDrawRectangleLines*(dst: ^Image, rec: Rectangle, thick: int32, color: Color)
fn ImageDraw*(dst: ^Image, src: Image, srcRec: Rectangle, dstRec: Rectangle, tint: Color)
fn ImageDrawText*(dst: ^Image, text: str, posX: int32, posY: int32, fontSize: int32, color: Color)
fn ImageDrawTextEx*(dst: ^Image, font: Font, text: str, position: Vector2, fontSize: real32, spacing: real32, tint: Color)
fn LoadTexture*(fileName: str): Texture
fn LoadTextureFromImage*(image: Image): Texture
fn LoadTextureCubemap*(image: Image, layout: int32): Texture
fn LoadRenderTexture*(width: int32, height: int32): RenderTexture
fn UnloadTexture*(texture: Texture)
fn UnloadRenderTexture*(target: RenderTexture)
fn UpdateTexture*(texture: Texture, pixels: ^void)
fn UpdateTextureRec*(texture: Texture, rec: Rectangle, pixels: ^void)
fn GenTextureMipmaps*(texture: ^Texture)
fn SetTextureFilter*(texture: Texture, filter: int32)
fn SetTextureWrap*(texture: Texture, wrap: int32)
fn DrawTexture*(texture: Texture, posX: int32, posY: int32, tint: Color)
fn DrawTextureV*(texture: Texture, position: Vector2, tint: Color)
fn DrawTextureEx*(texture: Texture, position: Vector2, rotation: real32, scale: real32, tint: Color)
fn DrawTextureRec*(texture: Texture, source: Rectangle, position: Vector2, tint: Color)
fn DrawTextureQuad*(texture: Texture, tiling: Vector2, offset: Vector2, quad: Rectangle, tint: Color)
fn DrawTextureTiled*(texture: Texture, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: real32, scale: real32, tint: Color)
fn DrawTexturePro*(texture: Texture, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: real32, tint: Color)
fn DrawTextureNPatch*(texture: Texture, nPatchInfo: NPatchInfo, dest: Rectangle, origin: Vector2, rotation: real32, tint: Color)
fn DrawTexturePoly*(texture: Texture, center: Vector2, points: ^Vector2, texcoords: ^Vector2, pointCount: int32, tint: Color)
fn Fade*(color: Color, alpha: real32): Color
fn ColorToInt*(color: Color): int32
fn ColorNormalize*(color: Color): Vector4
fn ColorFromNormalized*(normalized: Vector4): Color
fn ColorToHSV*(color: Color): Vector3
fn ColorFromHSV*(hue: real32, saturation: real32, value: real32): Color
fn ColorAlpha*(color: Color, alpha: real32): Color
fn ColorAlphaBlend*(dst: Color, src: Color, tint: Color): Color
fn GetColor*(hexValue: uint32): Color
fn GetPixelColor*(srcPtr: ^void, format: int32): Color
fn SetPixelColor*(dstPtr: ^void, color: Color, format: int32)
fn GetPixelDataSize*(width: int32, height: int32, format: int32): int32
fn GetFontDefault*(): Font
fn LoadFont*(fileName: str): Font
fn LoadFontEx*(fileName: str, fontSize: int32, fontChars: ^int32, glyphCount: int32): Font
fn LoadFontFromImage*(image: Image, key: Color, firstChar: int32): Font
fn LoadFontFromMemory*(fileType: str, fileData: ^uint8, dataSize: int32, fontSize: int32, fontChars: ^int32, glyphCount: int32): Font
// Skipping LoadFontData
fn GenImageFontAtlas*(chars: ^void, recs: ^void, glyphCount: int32, fontSize: int32, padding: int32, packMethod: int32): Image
fn UnloadFontData*(chars: ^GlyphInfo, glyphCount: int32)
fn UnloadFont*(font: Font)
fn ExportFontAsCode*(font: Font, fileName: str): bool
fn DrawFPS*(posX: int32, posY: int32)
fn DrawText*(text: str, posX: int32, posY: int32, fontSize: int32, color: Color)
fn DrawTextEx*(font: Font, text: str, position: Vector2, fontSize: real32, spacing: real32, tint: Color)
fn DrawTextPro*(font: Font, text: str, position: Vector2, origin: Vector2, rotation: real32, fontSize: real32, spacing: real32, tint: Color)
fn DrawTextCodepoint*(font: Font, codepoint: int32, position: Vector2, fontSize: real32, tint: Color)
fn DrawTextCodepoints*(font: Font, codepoints: ^int32, count: int32, position: Vector2, fontSize: real32, spacing: real32, tint: Color)
fn MeasureText*(text: str, fontSize: int32): int32
fn MeasureTextEx*(font: Font, text: str, fontSize: real32, spacing: real32): Vector2
fn GetGlyphIndex*(font: Font, codepoint: int32): int32
fn GetGlyphInfo*(font: Font, codepoint: int32): GlyphInfo
fn GetGlyphAtlasRec*(font: Font, codepoint: int32): Rectangle
fn LoadCodepoints*(text: str, count: ^int32): ^int32
fn UnloadCodepoints*(codepoints: ^int32)
fn GetCodepointCount*(text: str): int32
fn GetCodepoint*(text: str, bytesProcessed: ^int32): int32
fn CodepointToUTF8*(codepoint: int32, byteSize: ^int32): str
fn TextCodepointsToUTF8*(codepoints: ^int32, length: int32): str
fn TextCopy*(dst: str, src: str): int32
fn TextIsEqual*(text1: str, text2: str): bool
fn TextLength*(text: str): uint32
// Skipping TextFormat
fn TextSubtext*(text: str, position: int32, length: int32): str
fn TextReplace*(text: str, replace: str, by: str): str
fn TextInsert*(text: str, insert: str, position: int32): str
fn TextJoin*(textList: ^str, count: int32, delimiter: str): str
fn TextSplit*(text: str, delimiter: char, count: ^int32): ^str
fn TextAppend*(text: str, append: str, position: ^int32)
fn TextFindIndex*(text: str, find: str): int32
fn TextToUpper*(text: str): str
fn TextToLower*(text: str): str
fn TextToPascal*(text: str): str
fn TextToInteger*(text: str): int32
fn DrawLine3D*(startPos: Vector3, endPos: Vector3, color: Color)
fn DrawPoint3D*(position: Vector3, color: Color)
fn DrawCircle3D*(center: Vector3, radius: real32, rotationAxis: Vector3, rotationAngle: real32, color: Color)
fn DrawTriangle3D*(v1: Vector3, v2: Vector3, v3: Vector3, color: Color)
fn DrawTriangleStrip3D*(points: ^Vector3, pointCount: int32, color: Color)
fn DrawCube*(position: Vector3, width: real32, height: real32, length: real32, color: Color)
fn DrawCubeV*(position: Vector3, size: Vector3, color: Color)
fn DrawCubeWires*(position: Vector3, width: real32, height: real32, length: real32, color: Color)
fn DrawCubeWiresV*(position: Vector3, size: Vector3, color: Color)
fn DrawCubeTexture*(texture: Texture, position: Vector3, width: real32, height: real32, length: real32, color: Color)
fn DrawCubeTextureRec*(texture: Texture, source: Rectangle, position: Vector3, width: real32, height: real32, length: real32, color: Color)
fn DrawSphere*(centerPos: Vector3, radius: real32, color: Color)
fn DrawSphereEx*(centerPos: Vector3, radius: real32, rings: int32, slices: int32, color: Color)
fn DrawSphereWires*(centerPos: Vector3, radius: real32, rings: int32, slices: int32, color: Color)
fn DrawCylinder*(position: Vector3, radiusTop: real32, radiusBottom: real32, height: real32, slices: int32, color: Color)
fn DrawCylinderEx*(startPos: Vector3, endPos: Vector3, startRadius: real32, endRadius: real32, sides: int32, color: Color)
fn DrawCylinderWires*(position: Vector3, radiusTop: real32, radiusBottom: real32, height: real32, slices: int32, color: Color)
fn DrawCylinderWiresEx*(startPos: Vector3, endPos: Vector3, startRadius: real32, endRadius: real32, sides: int32, color: Color)
fn DrawPlane*(centerPos: Vector3, size: Vector2, color: Color)
fn DrawRay*(ray: Ray, color: Color)
fn DrawGrid*(slices: int32, spacing: real32)
fn LoadModel*(fileName: str): Model
fn LoadModelFromMesh*(mesh: Mesh): Model
fn UnloadModel*(model: Model)
fn UnloadModelKeepMeshes*(model: Model)
fn GetModelBoundingBox*(model: Model): BoundingBox
fn DrawModel*(model: Model, position: Vector3, scale: real32, tint: Color)
fn DrawModelEx*(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: real32, scale: Vector3, tint: Color)
fn DrawModelWires*(model: Model, position: Vector3, scale: real32, tint: Color)
fn DrawModelWiresEx*(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: real32, scale: Vector3, tint: Color)
fn DrawBoundingBox*(box: BoundingBox, color: Color)
fn DrawBillboard*(camera: Camera3D, texture: Texture, position: Vector3, size: real32, tint: Color)
fn DrawBillboardRec*(camera: Camera3D, texture: Texture, source: Rectangle, position: Vector3, size: Vector2, tint: Color)
fn DrawBillboardPro*(camera: Camera3D, texture: Texture, source: Rectangle, position: Vector3, up: Vector3, size: Vector2, origin: Vector2, rotation: real32, tint: Color)
fn UploadMesh*(mesh: ^Mesh, dynamic: bool)
fn UpdateMeshBuffer*(mesh: Mesh, index: int32, data: ^void, dataSize: int32, offset: int32)
fn UnloadMesh*(mesh: Mesh)
fn DrawMesh*(mesh: Mesh, material: Material, transform: Matrix)
fn DrawMeshInstanced*(mesh: Mesh, material: Material, transforms: ^Matrix, instances: int32)
fn ExportMesh*(mesh: Mesh, fileName: str): bool
fn GetMeshBoundingBox*(mesh: Mesh): BoundingBox
fn GenMeshTangents*(mesh: ^Mesh)
fn GenMeshPoly*(sides: int32, radius: real32): Mesh
fn GenMeshPlane*(width: real32, length: real32, resX: int32, resZ: int32): Mesh
fn GenMeshCube*(width: real32, height: real32, length: real32): Mesh
fn GenMeshSphere*(radius: real32, rings: int32, slices: int32): Mesh
fn GenMeshHemiSphere*(radius: real32, rings: int32, slices: int32): Mesh
fn GenMeshCylinder*(radius: real32, height: real32, slices: int32): Mesh
fn GenMeshCone*(radius: real32, height: real32, slices: int32): Mesh
fn GenMeshTorus*(radius: real32, size: real32, radSeg: int32, sides: int32): Mesh
fn GenMeshKnot*(radius: real32, size: real32, radSeg: int32, sides: int32): Mesh
fn GenMeshHeightmap*(heightmap: Image, size: Vector3): Mesh
fn GenMeshCubicmap*(cubicmap: Image, cubeSize: Vector3): Mesh
fn LoadMaterials*(fileName: str, materialCount: ^int32): ^Material
fn LoadMaterialDefault*(): Material
fn UnloadMaterial*(material: Material)
fn SetMaterialTexture*(material: ^Material, mapType: int32, texture: Texture)
fn SetModelMeshMaterial*(model: ^Model, meshId: int32, materialId: int32)
fn LoadModelAnimations*(fileName: str, animCount: ^uint32): ^ModelAnimation
fn UpdateModelAnimation*(model: Model, anim: ModelAnimation, frame: int32)
fn UnloadModelAnimation*(anim: ModelAnimation)
fn UnloadModelAnimations*(animations: ^ModelAnimation, count: uint32)
fn IsModelAnimationValid*(model: Model, anim: ModelAnimation): bool
fn CheckCollisionSpheres*(center1: Vector3, radius1: real32, center2: Vector3, radius2: real32): bool
fn CheckCollisionBoxes*(box1: BoundingBox, box2: BoundingBox): bool
fn CheckCollisionBoxSphere*(box: BoundingBox, center: Vector3, radius: real32): bool
fn GetRayCollisionSphere*(ray: Ray, center: Vector3, radius: real32): RayCollision
fn GetRayCollisionBox*(ray: Ray, box: BoundingBox): RayCollision
fn GetRayCollisionMesh*(ray: Ray, mesh: Mesh, transform: Matrix): RayCollision
fn GetRayCollisionTriangle*(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3): RayCollision
fn GetRayCollisionQuad*(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3, p4: Vector3): RayCollision
fn InitAudioDevice*()
fn CloseAudioDevice*()
fn IsAudioDeviceReady*(): bool
fn SetMasterVolume*(volume: real32)
fn LoadWave*(fileName: str): Wave
fn LoadWaveFromMemory*(fileType: str, fileData: ^uint8, dataSize: int32): Wave
fn LoadSound*(fileName: str): Sound
fn LoadSoundFromWave*(wave: Wave): Sound
fn UpdateSound*(sound: Sound, data: ^void, sampleCount: int32)
fn UnloadWave*(wave: Wave)
fn UnloadSound*(sound: Sound)
fn ExportWave*(wave: Wave, fileName: str): bool
fn ExportWaveAsCode*(wave: Wave, fileName: str): bool
fn PlaySound*(sound: Sound)
fn StopSound*(sound: Sound)
fn PauseSound*(sound: Sound)
fn ResumeSound*(sound: Sound)
fn PlaySoundMulti*(sound: Sound)
fn StopSoundMulti*()
fn GetSoundsPlaying*(): int32
fn IsSoundPlaying*(sound: Sound): bool
fn SetSoundVolume*(sound: Sound, volume: real32)
fn SetSoundPitch*(sound: Sound, pitch: real32)
fn SetSoundPan*(sound: Sound, pan: real32)
fn WaveCopy*(wave: Wave): Wave
fn WaveCrop*(wave: ^Wave, initSample: int32, finalSample: int32)
fn WaveFormat*(wave: ^Wave, sampleRate: int32, sampleSize: int32, channels: int32)
fn LoadWaveSamples*(wave: Wave): ^real32
fn UnloadWaveSamples*(samples: ^real32)
fn LoadMusicStream*(fileName: str): Music
fn LoadMusicStreamFromMemory*(fileType: str, data: ^uint8, dataSize: int32): Music
fn UnloadMusicStream*(music: Music)
fn PlayMusicStream*(music: Music)
fn IsMusicStreamPlaying*(music: Music): bool
fn UpdateMusicStream*(music: Music)
fn StopMusicStream*(music: Music)
fn PauseMusicStream*(music: Music)
fn ResumeMusicStream*(music: Music)
fn SeekMusicStream*(music: Music, position: real32)
fn SetMusicVolume*(music: Music, volume: real32)
fn SetMusicPitch*(music: Music, pitch: real32)
fn SetMusicPan*(music: Music, pan: real32)
fn GetMusicTimeLength*(music: Music): real32
fn GetMusicTimePlayed*(music: Music): real32
fn LoadAudioStream*(sampleRate: uint32, sampleSize: uint32, channels: uint32): AudioStream
fn UnloadAudioStream*(stream: AudioStream)
fn UpdateAudioStream*(stream: AudioStream, data: ^void, frameCount: int32)
fn IsAudioStreamProcessed*(stream: AudioStream): bool
fn PlayAudioStream*(stream: AudioStream)
fn PauseAudioStream*(stream: AudioStream)
fn ResumeAudioStream*(stream: AudioStream)
fn IsAudioStreamPlaying*(stream: AudioStream): bool
fn StopAudioStream*(stream: AudioStream)
fn SetAudioStreamVolume*(stream: AudioStream, volume: real32)
fn SetAudioStreamPitch*(stream: AudioStream, pitch: real32)
fn SetAudioStreamPan*(stream: AudioStream, pan: real32)
fn SetAudioStreamBufferSizeDefault*(size: int32)
// Skipping SetAudioStreamCallback
// Skipping AttachAudioStreamProcessor
// Skipping DetachAudioStreamProcessor
fn Clamp*(value: real32, min: real32, max: real32): real32
fn Lerp*(start: real32, end: real32, amount: real32): real32
fn Normalize*(value: real32, start: real32, end: real32): real32
fn Remap*(value: real32, inputStart: real32, inputEnd: real32, outputStart: real32, outputEnd: real32): real32
fn Wrap*(value: real32, min: real32, max: real32): real32
fn FloatEquals*(x: real32, y: real32): int32
fn Vector2Zero*(): Vector2
fn Vector2One*(): Vector2
fn Vector2Add*(v1: Vector2, v2: Vector2): Vector2
fn Vector2AddValue*(v: Vector2, add: real32): Vector2
fn Vector2Subtract*(v1: Vector2, v2: Vector2): Vector2
fn Vector2SubtractValue*(v: Vector2, sub: real32): Vector2
fn Vector2Length*(v: Vector2): real32
fn Vector2LengthSqr*(v: Vector2): real32
fn Vector2DotProduct*(v1: Vector2, v2: Vector2): real32
fn Vector2Distance*(v1: Vector2, v2: Vector2): real32
fn Vector2DistanceSqr*(v1: Vector2, v2: Vector2): real32
fn Vector2Angle*(v1: Vector2, v2: Vector2): real32
fn Vector2Scale*(v: Vector2, scale: real32): Vector2
fn Vector2Multiply*(v1: Vector2, v2: Vector2): Vector2
fn Vector2Negate*(v: Vector2): Vector2
fn Vector2Divide*(v1: Vector2, v2: Vector2): Vector2
fn Vector2Normalize*(v: Vector2): Vector2
fn Vector2Transform*(v: Vector2, mat: Matrix): Vector2
fn Vector2Lerp*(v1: Vector2, v2: Vector2, amount: real32): Vector2
fn Vector2Reflect*(v: Vector2, normal: Vector2): Vector2
fn Vector2Rotate*(v: Vector2, angle: real32): Vector2
fn Vector2MoveTowards*(v: Vector2, target: Vector2, maxDistance: real32): Vector2
fn Vector2Invert*(v: Vector2): Vector2
fn Vector2Clamp*(v: Vector2, min: Vector2, max: Vector2): Vector2
fn Vector2ClampValue*(v: Vector2, min: real32, max: real32): Vector2
fn Vector2Equals*(p: Vector2, q: Vector2): int32
fn Vector3Zero*(): Vector3
fn Vector3One*(): Vector3
fn Vector3Add*(v1: Vector3, v2: Vector3): Vector3
fn Vector3AddValue*(v: Vector3, add: real32): Vector3
fn Vector3Subtract*(v1: Vector3, v2: Vector3): Vector3
fn Vector3SubtractValue*(v: Vector3, sub: real32): Vector3
fn Vector3Scale*(v: Vector3, scalar: real32): Vector3
fn Vector3Multiply*(v1: Vector3, v2: Vector3): Vector3
fn Vector3CrossProduct*(v1: Vector3, v2: Vector3): Vector3
fn Vector3Perpendicular*(v: Vector3): Vector3
fn Vector3Length*(v: Vector3): real32
fn Vector3LengthSqr*(v: Vector3): real32
fn Vector3DotProduct*(v1: Vector3, v2: Vector3): real32
fn Vector3Distance*(v1: Vector3, v2: Vector3): real32
fn Vector3DistanceSqr*(v1: Vector3, v2: Vector3): real32
fn Vector3Angle*(v1: Vector3, v2: Vector3): real32
fn Vector3Negate*(v: Vector3): Vector3
fn Vector3Divide*(v1: Vector3, v2: Vector3): Vector3
fn Vector3Normalize*(v: Vector3): Vector3
fn Vector3OrthoNormalize*(v1: ^Vector3, v2: ^Vector3)
fn Vector3Transform*(v: Vector3, mat: Matrix): Vector3
fn Vector3RotateByQuaternion*(v: Vector3, q: Vector4): Vector3
fn Vector3RotateByAxisAngle*(v: Vector3, axis: Vector3, angle: real32): Vector3
fn Vector3Lerp*(v1: Vector3, v2: Vector3, amount: real32): Vector3
fn Vector3Reflect*(v: Vector3, normal: Vector3): Vector3
fn Vector3Min*(v1: Vector3, v2: Vector3): Vector3
fn Vector3Max*(v1: Vector3, v2: Vector3): Vector3
fn Vector3Barycenter*(p: Vector3, a: Vector3, b: Vector3, c: Vector3): Vector3
fn Vector3Unproject*(source: Vector3, projection: Matrix, view: Matrix): Vector3
fn Vector3ToFloatV*(v: Vector3): float3
fn Vector3Invert*(v: Vector3): Vector3
fn Vector3Clamp*(v: Vector3, min: Vector3, max: Vector3): Vector3
fn Vector3ClampValue*(v: Vector3, min: real32, max: real32): Vector3
fn Vector3Equals*(p: Vector3, q: Vector3): int32
fn Vector3Refract*(v: Vector3, n: Vector3, r: real32): Vector3
fn MatrixDeterminant*(mat: Matrix): real32
fn MatrixTrace*(mat: Matrix): real32
fn MatrixTranspose*(mat: Matrix): Matrix
fn MatrixInvert*(mat: Matrix): Matrix
fn MatrixIdentity*(): Matrix
fn MatrixAdd*(left: Matrix, right: Matrix): Matrix
fn MatrixSubtract*(left: Matrix, right: Matrix): Matrix
fn MatrixMultiply*(left: Matrix, right: Matrix): Matrix
fn MatrixTranslate*(x: real32, y: real32, z: real32): Matrix
fn MatrixRotate*(axis: Vector3, angle: real32): Matrix
fn MatrixRotateX*(angle: real32): Matrix
fn MatrixRotateY*(angle: real32): Matrix
fn MatrixRotateZ*(angle: real32): Matrix
fn MatrixRotateXYZ*(angle: Vector3): Matrix
fn MatrixRotateZYX*(angle: Vector3): Matrix
fn MatrixScale*(x: real32, y: real32, z: real32): Matrix
fn MatrixFrustum*(left: real, right: real, bottom: real, top: real, near: real, far: real): Matrix
fn MatrixPerspective*(fovy: real, aspect: real, near: real, far: real): Matrix
fn MatrixOrtho*(left: real, right: real, bottom: real, top: real, near: real, far: real): Matrix
fn MatrixLookAt*(eye: Vector3, target: Vector3, up: Vector3): Matrix
fn MatrixToFloatV*(mat: Matrix): float16
fn QuaternionAdd*(q1: Vector4, q2: Vector4): Vector4
fn QuaternionAddValue*(q: Vector4, add: real32): Vector4
fn QuaternionSubtract*(q1: Vector4, q2: Vector4): Vector4
fn QuaternionSubtractValue*(q: Vector4, sub: real32): Vector4
fn QuaternionIdentity*(): Vector4
fn QuaternionLength*(q: Vector4): real32
fn QuaternionNormalize*(q: Vector4): Vector4
fn QuaternionInvert*(q: Vector4): Vector4
fn QuaternionMultiply*(q1: Vector4, q2: Vector4): Vector4
fn QuaternionScale*(q: Vector4, mul: real32): Vector4
fn QuaternionDivide*(q1: Vector4, q2: Vector4): Vector4
fn QuaternionLerp*(q1: Vector4, q2: Vector4, amount: real32): Vector4
fn QuaternionNlerp*(q1: Vector4, q2: Vector4, amount: real32): Vector4
fn QuaternionSlerp*(q1: Vector4, q2: Vector4, amount: real32): Vector4
fn QuaternionFromVector3ToVector3*(from: Vector3, to: Vector3): Vector4
fn QuaternionFromMatrix*(mat: Matrix): Vector4
fn QuaternionToMatrix*(q: Vector4): Matrix
fn QuaternionFromAxisAngle*(axis: Vector3, angle: real32): Vector4
fn QuaternionToAxisAngle*(q: Vector4, outAxis: ^Vector3, outAngle: ^real32)
fn QuaternionFromEuler*(pitch: real32, yaw: real32, roll: real32): Vector4
fn QuaternionToEuler*(q: Vector4): Vector3
fn QuaternionTransform*(q: Vector4, mat: Matrix): Vector4
fn QuaternionEquals*(p: Vector4, q: Vector4): int32
fn rlMatrixMode*(mode: int32)
fn rlPushMatrix*()
fn rlPopMatrix*()
fn rlLoadIdentity*()
fn rlTranslatef*(x: real32, y: real32, z: real32)
fn rlRotatef*(angle: real32, x: real32, y: real32, z: real32)
fn rlScalef*(x: real32, y: real32, z: real32)
fn rlMultMatrixf*(matf: ^real32)
fn rlFrustum*(left: real, right: real, bottom: real, top: real, znear: real, zfar: real)
fn rlOrtho*(left: real, right: real, bottom: real, top: real, znear: real, zfar: real)
fn rlViewport*(x: int32, y: int32, width: int32, height: int32)
fn rlBegin*(mode: int32)
fn rlEnd*()
fn rlVertex2i*(x: int32, y: int32)
fn rlVertex2f*(x: real32, y: real32)
fn rlVertex3f*(x: real32, y: real32, z: real32)
fn rlTexCoord2f*(x: real32, y: real32)
fn rlNormal3f*(x: real32, y: real32, z: real32)
fn rlColor4ub*(r: uint8, g: uint8, b: uint8, a: uint8)
fn rlColor3f*(x: real32, y: real32, z: real32)
fn rlColor4f*(x: real32, y: real32, z: real32, w: real32)
fn rlEnableVertexArray*(vaoId: uint32): bool
fn rlDisableVertexArray*()
fn rlEnableVertexBuffer*(id: uint32)
fn rlDisableVertexBuffer*()
fn rlEnableVertexBufferElement*(id: uint32)
fn rlDisableVertexBufferElement*()
fn rlEnableVertexAttribute*(index: uint32)
fn rlDisableVertexAttribute*(index: uint32)
// Skipping rlEnableStatePointer
// Skipping rlDisableStatePointer
fn rlActiveTextureSlot*(slot: int32)
fn rlEnableTexture*(id: uint32)
fn rlDisableTexture*()
fn rlEnableTextureCubemap*(id: uint32)
fn rlDisableTextureCubemap*()
fn rlTextureParameters*(id: uint32, param: int32, value: int32)
fn rlEnableShader*(id: uint32)
fn rlDisableShader*()
fn rlEnableFramebuffer*(id: uint32)
fn rlDisableFramebuffer*()
fn rlActiveDrawBuffers*(count: int32)
fn rlEnableColorBlend*()
fn rlDisableColorBlend*()
fn rlEnableDepthTest*()
fn rlDisableDepthTest*()
fn rlEnableDepthMask*()
fn rlDisableDepthMask*()
fn rlEnableBackfaceCulling*()
fn rlDisableBackfaceCulling*()
fn rlEnableScissorTest*()
fn rlDisableScissorTest*()
fn rlScissor*(x: int32, y: int32, width: int32, height: int32)
fn rlEnableWireMode*()
fn rlDisableWireMode*()
fn rlSetLineWidth*(width: real32)
fn rlGetLineWidth*(): real32
fn rlEnableSmoothLines*()
fn rlDisableSmoothLines*()
fn rlEnableStereoRender*()
fn rlDisableStereoRender*()
fn rlIsStereoRenderEnabled*(): bool
fn rlClearColor*(r: uint8, g: uint8, b: uint8, a: uint8)
fn rlClearScreenBuffers*()
fn rlCheckErrors*()
fn rlSetBlendMode*(mode: int32)
fn rlSetBlendFactors*(glSrcFactor: int32, glDstFactor: int32, glEquation: int32)
fn rlglInit*(width: int32, height: int32)
fn rlglClose*()
fn rlLoadExtensions*(loader: ^void)
fn rlGetVersion*(): int32
fn rlSetFramebufferWidth*(width: int32)
fn rlGetFramebufferWidth*(): int32
fn rlSetFramebufferHeight*(height: int32)
fn rlGetFramebufferHeight*(): int32
fn rlGetTextureIdDefault*(): uint32
fn rlGetShaderIdDefault*(): uint32
fn rlGetShaderLocsDefault*(): ^int32
// Skipping rlLoadRenderBatch
// Skipping rlUnloadRenderBatch
// Skipping rlDrawRenderBatch
// Skipping rlSetRenderBatchActive
fn rlDrawRenderBatchActive*()
fn rlCheckRenderBatchLimit*(vCount: int32): bool
fn rlSetTexture*(id: uint32)
fn rlLoadVertexArray*(): uint32
fn rlLoadVertexBuffer*(buffer: ^void, size: int32, dynamic: bool): uint32
fn rlLoadVertexBufferElement*(buffer: ^void, size: int32, dynamic: bool): uint32
fn rlUpdateVertexBuffer*(bufferId: uint32, data: ^void, dataSize: int32, offset: int32)
fn rlUpdateVertexBufferElements*(id: uint32, data: ^void, dataSize: int32, offset: int32)
fn rlUnloadVertexArray*(vaoId: uint32)
fn rlUnloadVertexBuffer*(vboId: uint32)
fn rlSetVertexAttribute*(index: uint32, compSize: int32, typeInput: int32, normalized: bool, stride: int32, pointer: ^void)
fn rlSetVertexAttributeDivisor*(index: uint32, divisor: int32)
fn rlSetVertexAttributeDefault*(locIndex: int32, value: ^void, attribType: int32, count: int32)
fn rlDrawVertexArray*(offset: int32, count: int32)
fn rlDrawVertexArrayElements*(offset: int32, count: int32, buffer: ^void)
fn rlDrawVertexArrayInstanced*(offset: int32, count: int32, instances: int32)
fn rlDrawVertexArrayElementsInstanced*(offset: int32, count: int32, buffer: ^void, instances: int32)
fn rlLoadTexture*(data: ^void, width: int32, height: int32, format: int32, mipmapCount: int32): uint32
fn rlLoadTextureDepth*(width: int32, height: int32, useRenderBuffer: bool): uint32
fn rlLoadTextureCubemap*(data: ^void, size: int32, format: int32): uint32
fn rlUpdateTexture*(id: uint32, offsetX: int32, offsetY: int32, width: int32, height: int32, format: int32, data: ^void)
fn rlGetGlTextureFormats*(format: int32, glInternalFormat: ^uint32, glFormat: ^uint32, glType: ^uint32)
fn rlGetPixelFormatName*(format: uint32): str
fn rlUnloadTexture*(id: uint32)
fn rlGenTextureMipmaps*(id: uint32, width: int32, height: int32, format: int32, mipmaps: ^int32)
fn rlReadTexturePixels*(id: uint32, width: int32, height: int32, format: int32): ^void
fn rlReadScreenPixels*(width: int32, height: int32): ^uint8
fn rlLoadFramebuffer*(width: int32, height: int32): uint32
fn rlFramebufferAttach*(fboId: uint32, texId: uint32, attachType: int32, texType: int32, mipLevel: int32)
fn rlFramebufferComplete*(id: uint32): bool
fn rlUnloadFramebuffer*(id: uint32)
fn rlLoadShaderCode*(vsCode: str, fsCode: str): uint32
fn rlCompileShader*(shaderCode: str, typeInput: int32): uint32
fn rlLoadShaderProgram*(vShaderId: uint32, fShaderId: uint32): uint32
fn rlUnloadShaderProgram*(id: uint32)
fn rlGetLocationUniform*(shaderId: uint32, uniformName: str): int32
fn rlGetLocationAttrib*(shaderId: uint32, attribName: str): int32
fn rlSetUniform*(locIndex: int32, value: ^void, uniformType: int32, count: int32)
fn rlSetUniformMatrix*(locIndex: int32, mat: Matrix)
fn rlSetUniformSampler*(locIndex: int32, textureId: uint32)
fn rlSetShader*(id: uint32, locs: ^int32)
fn rlLoadComputeShaderProgram*(shaderId: uint32): uint32
fn rlComputeShaderDispatch*(groupX: uint32, groupY: uint32, groupZ: uint32)
fn rlLoadShaderBuffer*(size: uint, data: ^void, usageHint: int32): uint32
fn rlUnloadShaderBuffer*(ssboId: uint32)
fn rlUpdateShaderBufferElements*(id: uint32, data: ^void, dataSize: uint, offset: uint)
fn rlGetShaderBufferSize*(id: uint32): uint
fn rlReadShaderBufferElements*(id: uint32, dest: ^void, count: uint, offset: uint)
fn rlBindShaderBuffer*(id: uint32, index: uint32)
fn rlCopyBuffersElements*(destId: uint32, srcId: uint32, destOffset: uint, srcOffset: uint, count: uint)
fn rlBindImageTexture*(id: uint32, index: uint32, format: uint32, readonly: int32)
fn rlGetMatrixModelview*(): Matrix
fn rlGetMatrixProjection*(): Matrix
fn rlGetMatrixTransform*(): Matrix
fn rlGetMatrixProjectionStereo*(eye: int32): Matrix
fn rlGetMatrixViewOffsetStereo*(eye: int32): Matrix
fn rlSetMatrixProjection*(proj: Matrix)
fn rlSetMatrixModelview*(view: Matrix)
fn rlSetMatrixProjectionStereo*(right: Matrix, left: Matrix)
fn rlSetMatrixViewOffsetStereo*(right: Matrix, left: Matrix)
fn rlLoadDrawCube*()
fn rlLoadDrawQuad*()

// Enums
const FLAG_VSYNC_HINT* = 64
const FLAG_FULLSCREEN_MODE* = 2
const FLAG_WINDOW_RESIZABLE* = 4
const FLAG_WINDOW_UNDECORATED* = 8
const FLAG_WINDOW_HIDDEN* = 128
const FLAG_WINDOW_MINIMIZED* = 512
const FLAG_WINDOW_MAXIMIZED* = 1024
const FLAG_WINDOW_UNFOCUSED* = 2048
const FLAG_WINDOW_TOPMOST* = 4096
const FLAG_WINDOW_ALWAYS_RUN* = 256
const FLAG_WINDOW_TRANSPARENT* = 16
const FLAG_WINDOW_HIGHDPI* = 8192
const FLAG_WINDOW_MOUSE_PASSTHROUGH* = 16384
const FLAG_MSAA_4X_HINT* = 32
const FLAG_INTERLACED_HINT* = 65536
const LOG_ALL* = 0
const LOG_TRACE* = 1
const LOG_DEBUG* = 2
const LOG_INFO* = 3
const LOG_WARNING* = 4
const LOG_ERROR* = 5
const LOG_FATAL* = 6
const LOG_NONE* = 7
const KEY_NULL* = 0
const KEY_APOSTROPHE* = 39
const KEY_COMMA* = 44
const KEY_MINUS* = 45
const KEY_PERIOD* = 46
const KEY_SLASH* = 47
const KEY_ZERO* = 48
const KEY_ONE* = 49
const KEY_TWO* = 50
const KEY_THREE* = 51
const KEY_FOUR* = 52
const KEY_FIVE* = 53
const KEY_SIX* = 54
const KEY_SEVEN* = 55
const KEY_EIGHT* = 56
const KEY_NINE* = 57
const KEY_SEMICOLON* = 59
const KEY_EQUAL* = 61
const KEY_A* = 65
const KEY_B* = 66
const KEY_C* = 67
const KEY_D* = 68
const KEY_E* = 69
const KEY_F* = 70
const KEY_G* = 71
const KEY_H* = 72
const KEY_I* = 73
const KEY_J* = 74
const KEY_K* = 75
const KEY_L* = 76
const KEY_M* = 77
const KEY_N* = 78
const KEY_O* = 79
const KEY_P* = 80
const KEY_Q* = 81
const KEY_R* = 82
const KEY_S* = 83
const KEY_T* = 84
const KEY_U* = 85
const KEY_V* = 86
const KEY_W* = 87
const KEY_X* = 88
const KEY_Y* = 89
const KEY_Z* = 90
const KEY_LEFT_BRACKET* = 91
const KEY_BACKSLASH* = 92
const KEY_RIGHT_BRACKET* = 93
const KEY_GRAVE* = 96
const KEY_SPACE* = 32
const KEY_ESCAPE* = 256
const KEY_ENTER* = 257
const KEY_TAB* = 258
const KEY_BACKSPACE* = 259
const KEY_INSERT* = 260
const KEY_DELETE* = 261
const KEY_RIGHT* = 262
const KEY_LEFT* = 263
const KEY_DOWN* = 264
const KEY_UP* = 265
const KEY_PAGE_UP* = 266
const KEY_PAGE_DOWN* = 267
const KEY_HOME* = 268
const KEY_END* = 269
const KEY_CAPS_LOCK* = 280
const KEY_SCROLL_LOCK* = 281
const KEY_NUM_LOCK* = 282
const KEY_PRINT_SCREEN* = 283
const KEY_PAUSE* = 284
const KEY_F1* = 290
const KEY_F2* = 291
const KEY_F3* = 292
const KEY_F4* = 293
const KEY_F5* = 294
const KEY_F6* = 295
const KEY_F7* = 296
const KEY_F8* = 297
const KEY_F9* = 298
const KEY_F10* = 299
const KEY_F11* = 300
const KEY_F12* = 301
const KEY_LEFT_SHIFT* = 340
const KEY_LEFT_CONTROL* = 341
const KEY_LEFT_ALT* = 342
const KEY_LEFT_SUPER* = 343
const KEY_RIGHT_SHIFT* = 344
const KEY_RIGHT_CONTROL* = 345
const KEY_RIGHT_ALT* = 346
const KEY_RIGHT_SUPER* = 347
const KEY_KB_MENU* = 348
const KEY_KP_0* = 320
const KEY_KP_1* = 321
const KEY_KP_2* = 322
const KEY_KP_3* = 323
const KEY_KP_4* = 324
const KEY_KP_5* = 325
const KEY_KP_6* = 326
const KEY_KP_7* = 327
const KEY_KP_8* = 328
const KEY_KP_9* = 329
const KEY_KP_DECIMAL* = 330
const KEY_KP_DIVIDE* = 331
const KEY_KP_MULTIPLY* = 332
const KEY_KP_SUBTRACT* = 333
const KEY_KP_ADD* = 334
const KEY_KP_ENTER* = 335
const KEY_KP_EQUAL* = 336
const KEY_BACK* = 4
const KEY_MENU* = 82
const KEY_VOLUME_UP* = 24
const KEY_VOLUME_DOWN* = 25
const MOUSE_BUTTON_LEFT* = 0
const MOUSE_BUTTON_RIGHT* = 1
const MOUSE_BUTTON_MIDDLE* = 2
const MOUSE_BUTTON_SIDE* = 3
const MOUSE_BUTTON_EXTRA* = 4
const MOUSE_BUTTON_FORWARD* = 5
const MOUSE_BUTTON_BACK* = 6
const MOUSE_CURSOR_DEFAULT* = 0
const MOUSE_CURSOR_ARROW* = 1
const MOUSE_CURSOR_IBEAM* = 2
const MOUSE_CURSOR_CROSSHAIR* = 3
const MOUSE_CURSOR_POINTING_HAND* = 4
const MOUSE_CURSOR_RESIZE_EW* = 5
const MOUSE_CURSOR_RESIZE_NS* = 6
const MOUSE_CURSOR_RESIZE_NWSE* = 7
const MOUSE_CURSOR_RESIZE_NESW* = 8
const MOUSE_CURSOR_RESIZE_ALL* = 9
const MOUSE_CURSOR_NOT_ALLOWED* = 10
const GAMEPAD_BUTTON_UNKNOWN* = 0
const GAMEPAD_BUTTON_LEFT_FACE_UP* = 1
const GAMEPAD_BUTTON_LEFT_FACE_RIGHT* = 2
const GAMEPAD_BUTTON_LEFT_FACE_DOWN* = 3
const GAMEPAD_BUTTON_LEFT_FACE_LEFT* = 4
const GAMEPAD_BUTTON_RIGHT_FACE_UP* = 5
const GAMEPAD_BUTTON_RIGHT_FACE_RIGHT* = 6
const GAMEPAD_BUTTON_RIGHT_FACE_DOWN* = 7
const GAMEPAD_BUTTON_RIGHT_FACE_LEFT* = 8
const GAMEPAD_BUTTON_LEFT_TRIGGER_1* = 9
const GAMEPAD_BUTTON_LEFT_TRIGGER_2* = 10
const GAMEPAD_BUTTON_RIGHT_TRIGGER_1* = 11
const GAMEPAD_BUTTON_RIGHT_TRIGGER_2* = 12
const GAMEPAD_BUTTON_MIDDLE_LEFT* = 13
const GAMEPAD_BUTTON_MIDDLE* = 14
const GAMEPAD_BUTTON_MIDDLE_RIGHT* = 15
const GAMEPAD_BUTTON_LEFT_THUMB* = 16
const GAMEPAD_BUTTON_RIGHT_THUMB* = 17
const GAMEPAD_AXIS_LEFT_X* = 0
const GAMEPAD_AXIS_LEFT_Y* = 1
const GAMEPAD_AXIS_RIGHT_X* = 2
const GAMEPAD_AXIS_RIGHT_Y* = 3
const GAMEPAD_AXIS_LEFT_TRIGGER* = 4
const GAMEPAD_AXIS_RIGHT_TRIGGER* = 5
const MATERIAL_MAP_ALBEDO* = 0
const MATERIAL_MAP_METALNESS* = 1
const MATERIAL_MAP_NORMAL* = 2
const MATERIAL_MAP_ROUGHNESS* = 3
const MATERIAL_MAP_OCCLUSION* = 4
const MATERIAL_MAP_EMISSION* = 5
const MATERIAL_MAP_HEIGHT* = 6
const MATERIAL_MAP_CUBEMAP* = 7
const MATERIAL_MAP_IRRADIANCE* = 8
const MATERIAL_MAP_PREFILTER* = 9
const MATERIAL_MAP_BRDF* = 10
const SHADER_LOC_VERTEX_POSITION* = 0
const SHADER_LOC_VERTEX_TEXCOORD01* = 1
const SHADER_LOC_VERTEX_TEXCOORD02* = 2
const SHADER_LOC_VERTEX_NORMAL* = 3
const SHADER_LOC_VERTEX_TANGENT* = 4
const SHADER_LOC_VERTEX_COLOR* = 5
const SHADER_LOC_MATRIX_MVP* = 6
const SHADER_LOC_MATRIX_VIEW* = 7
const SHADER_LOC_MATRIX_PROJECTION* = 8
const SHADER_LOC_MATRIX_MODEL* = 9
const SHADER_LOC_MATRIX_NORMAL* = 10
const SHADER_LOC_VECTOR_VIEW* = 11
const SHADER_LOC_COLOR_DIFFUSE* = 12
const SHADER_LOC_COLOR_SPECULAR* = 13
const SHADER_LOC_COLOR_AMBIENT* = 14
const SHADER_LOC_MAP_ALBEDO* = 15
const SHADER_LOC_MAP_METALNESS* = 16
const SHADER_LOC_MAP_NORMAL* = 17
const SHADER_LOC_MAP_ROUGHNESS* = 18
const SHADER_LOC_MAP_OCCLUSION* = 19
const SHADER_LOC_MAP_EMISSION* = 20
const SHADER_LOC_MAP_HEIGHT* = 21
const SHADER_LOC_MAP_CUBEMAP* = 22
const SHADER_LOC_MAP_IRRADIANCE* = 23
const SHADER_LOC_MAP_PREFILTER* = 24
const SHADER_LOC_MAP_BRDF* = 25
const SHADER_UNIFORM_FLOAT* = 0
const SHADER_UNIFORM_VEC2* = 1
const SHADER_UNIFORM_VEC3* = 2
const SHADER_UNIFORM_VEC4* = 3
const SHADER_UNIFORM_INT* = 4
const SHADER_UNIFORM_IVEC2* = 5
const SHADER_UNIFORM_IVEC3* = 6
const SHADER_UNIFORM_IVEC4* = 7
const SHADER_UNIFORM_SAMPLER2D* = 8
const SHADER_ATTRIB_FLOAT* = 0
const SHADER_ATTRIB_VEC2* = 1
const SHADER_ATTRIB_VEC3* = 2
const SHADER_ATTRIB_VEC4* = 3
const PIXELFORMAT_UNCOMPRESSED_GRAYSCALE* = 1
const PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA* = 2
const PIXELFORMAT_UNCOMPRESSED_R5G6B5* = 3
const PIXELFORMAT_UNCOMPRESSED_R8G8B8* = 4
const PIXELFORMAT_UNCOMPRESSED_R5G5B5A1* = 5
const PIXELFORMAT_UNCOMPRESSED_R4G4B4A4* = 6
const PIXELFORMAT_UNCOMPRESSED_R8G8B8A8* = 7
const PIXELFORMAT_UNCOMPRESSED_R32* = 8
const PIXELFORMAT_UNCOMPRESSED_R32G32B32* = 9
const PIXELFORMAT_UNCOMPRESSED_R32G32B32A32* = 10
const PIXELFORMAT_COMPRESSED_DXT1_RGB* = 11
const PIXELFORMAT_COMPRESSED_DXT1_RGBA* = 12
const PIXELFORMAT_COMPRESSED_DXT3_RGBA* = 13
const PIXELFORMAT_COMPRESSED_DXT5_RGBA* = 14
const PIXELFORMAT_COMPRESSED_ETC1_RGB* = 15
const PIXELFORMAT_COMPRESSED_ETC2_RGB* = 16
const PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA* = 17
const PIXELFORMAT_COMPRESSED_PVRT_RGB* = 18
const PIXELFORMAT_COMPRESSED_PVRT_RGBA* = 19
const PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA* = 20
const PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA* = 21
const TEXTURE_FILTER_POINT* = 0
const TEXTURE_FILTER_BILINEAR* = 1
const TEXTURE_FILTER_TRILINEAR* = 2
const TEXTURE_FILTER_ANISOTROPIC_4X* = 3
const TEXTURE_FILTER_ANISOTROPIC_8X* = 4
const TEXTURE_FILTER_ANISOTROPIC_16X* = 5
const TEXTURE_WRAP_REPEAT* = 0
const TEXTURE_WRAP_CLAMP* = 1
const TEXTURE_WRAP_MIRROR_REPEAT* = 2
const TEXTURE_WRAP_MIRROR_CLAMP* = 3
const CUBEMAP_LAYOUT_AUTO_DETECT* = 0
const CUBEMAP_LAYOUT_LINE_VERTICAL* = 1
const CUBEMAP_LAYOUT_LINE_HORIZONTAL* = 2
const CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR* = 3
const CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE* = 4
const CUBEMAP_LAYOUT_PANORAMA* = 5
const FONT_DEFAULT* = 0
const FONT_BITMAP* = 1
const FONT_SDF* = 2
const BLEND_ALPHA* = 0
const BLEND_ADDITIVE* = 1
const BLEND_MULTIPLIED* = 2
const BLEND_ADD_COLORS* = 3
const BLEND_SUBTRACT_COLORS* = 4
const BLEND_ALPHA_PREMULTIPLY* = 5
const BLEND_CUSTOM* = 6
const GESTURE_NONE* = 0
const GESTURE_TAP* = 1
const GESTURE_DOUBLETAP* = 2
const GESTURE_HOLD* = 4
const GESTURE_DRAG* = 8
const GESTURE_SWIPE_RIGHT* = 16
const GESTURE_SWIPE_LEFT* = 32
const GESTURE_SWIPE_UP* = 64
const GESTURE_SWIPE_DOWN* = 128
const GESTURE_PINCH_IN* = 256
const GESTURE_PINCH_OUT* = 512
const CAMERA_CUSTOM* = 0
const CAMERA_FREE* = 1
const CAMERA_ORBITAL* = 2
const CAMERA_FIRST_PERSON* = 3
const CAMERA_THIRD_PERSON* = 4
const CAMERA_PERSPECTIVE* = 0
const CAMERA_ORTHOGRAPHIC* = 1
const NPATCH_NINE_PATCH* = 0
const NPATCH_THREE_PATCH_VERTICAL* = 1
const NPATCH_THREE_PATCH_HORIZONTAL* = 2
const OPENGL_11* = 1
const OPENGL_21* = 2
const OPENGL_33* = 3
const OPENGL_43* = 4
const OPENGL_ES_20* = 5
const RL_ATTACHMENT_COLOR_CHANNEL0* = 0
const RL_ATTACHMENT_COLOR_CHANNEL1* = 1
const RL_ATTACHMENT_COLOR_CHANNEL2* = 2
const RL_ATTACHMENT_COLOR_CHANNEL3* = 3
const RL_ATTACHMENT_COLOR_CHANNEL4* = 4
const RL_ATTACHMENT_COLOR_CHANNEL5* = 5
const RL_ATTACHMENT_COLOR_CHANNEL6* = 6
const RL_ATTACHMENT_COLOR_CHANNEL7* = 7
const RL_ATTACHMENT_DEPTH* = 100
const RL_ATTACHMENT_STENCIL* = 200
const RL_ATTACHMENT_CUBEMAP_POSITIVE_X* = 0
const RL_ATTACHMENT_CUBEMAP_NEGATIVE_X* = 1
const RL_ATTACHMENT_CUBEMAP_POSITIVE_Y* = 2
const RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y* = 3
const RL_ATTACHMENT_CUBEMAP_POSITIVE_Z* = 4
const RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z* = 5
const RL_ATTACHMENT_TEXTURE2D* = 100
const RL_ATTACHMENT_RENDERBUFFER* = 200
const RL_LOG_ALL* = 0
const RL_LOG_TRACE* = 1
const RL_LOG_DEBUG* = 2
const RL_LOG_INFO* = 3
const RL_LOG_WARNING* = 4
const RL_LOG_ERROR* = 5
const RL_LOG_FATAL* = 6
const RL_LOG_NONE* = 7
const RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE* = 1
const RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA* = 2
const RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5* = 3
const RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8* = 4
const RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1* = 5
const RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4* = 6
const RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8* = 7
const RL_PIXELFORMAT_UNCOMPRESSED_R32* = 8
const RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32* = 9
const RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32* = 10
const RL_PIXELFORMAT_COMPRESSED_DXT1_RGB* = 11
const RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA* = 12
const RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA* = 13
const RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA* = 14
const RL_PIXELFORMAT_COMPRESSED_ETC1_RGB* = 15
const RL_PIXELFORMAT_COMPRESSED_ETC2_RGB* = 16
const RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA* = 17
const RL_PIXELFORMAT_COMPRESSED_PVRT_RGB* = 18
const RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA* = 19
const RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA* = 20
const RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA* = 21
const RL_TEXTURE_FILTER_POINT* = 0
const RL_TEXTURE_FILTER_BILINEAR* = 1
const RL_TEXTURE_FILTER_TRILINEAR* = 2
const RL_TEXTURE_FILTER_ANISOTROPIC_4X* = 3
const RL_TEXTURE_FILTER_ANISOTROPIC_8X* = 4
const RL_TEXTURE_FILTER_ANISOTROPIC_16X* = 5
const RL_BLEND_ALPHA* = 0
const RL_BLEND_ADDITIVE* = 1
const RL_BLEND_MULTIPLIED* = 2
const RL_BLEND_ADD_COLORS* = 3
const RL_BLEND_SUBTRACT_COLORS* = 4
const RL_BLEND_ALPHA_PREMULTIPLY* = 5
const RL_BLEND_CUSTOM* = 6
const RL_SHADER_LOC_VERTEX_POSITION* = 0
const RL_SHADER_LOC_VERTEX_TEXCOORD01* = 1
const RL_SHADER_LOC_VERTEX_TEXCOORD02* = 2
const RL_SHADER_LOC_VERTEX_NORMAL* = 3
const RL_SHADER_LOC_VERTEX_TANGENT* = 4
const RL_SHADER_LOC_VERTEX_COLOR* = 5
const RL_SHADER_LOC_MATRIX_MVP* = 6
const RL_SHADER_LOC_MATRIX_VIEW* = 7
const RL_SHADER_LOC_MATRIX_PROJECTION* = 8
const RL_SHADER_LOC_MATRIX_MODEL* = 9
const RL_SHADER_LOC_MATRIX_NORMAL* = 10
const RL_SHADER_LOC_VECTOR_VIEW* = 11
const RL_SHADER_LOC_COLOR_DIFFUSE* = 12
const RL_SHADER_LOC_COLOR_SPECULAR* = 13
const RL_SHADER_LOC_COLOR_AMBIENT* = 14
const RL_SHADER_LOC_MAP_ALBEDO* = 15
const RL_SHADER_LOC_MAP_METALNESS* = 16
const RL_SHADER_LOC_MAP_NORMAL* = 17
const RL_SHADER_LOC_MAP_ROUGHNESS* = 18
const RL_SHADER_LOC_MAP_OCCLUSION* = 19
const RL_SHADER_LOC_MAP_EMISSION* = 20
const RL_SHADER_LOC_MAP_HEIGHT* = 21
const RL_SHADER_LOC_MAP_CUBEMAP* = 22
const RL_SHADER_LOC_MAP_IRRADIANCE* = 23
const RL_SHADER_LOC_MAP_PREFILTER* = 24
const RL_SHADER_LOC_MAP_BRDF* = 25
const RL_SHADER_UNIFORM_FLOAT* = 0
const RL_SHADER_UNIFORM_VEC2* = 1
const RL_SHADER_UNIFORM_VEC3* = 2
const RL_SHADER_UNIFORM_VEC4* = 3
const RL_SHADER_UNIFORM_INT* = 4
const RL_SHADER_UNIFORM_IVEC2* = 5
const RL_SHADER_UNIFORM_IVEC3* = 6
const RL_SHADER_UNIFORM_IVEC4* = 7
const RL_SHADER_UNIFORM_SAMPLER2D* = 8
const RL_SHADER_ATTRIB_FLOAT* = 0
const RL_SHADER_ATTRIB_VEC2* = 1
const RL_SHADER_ATTRIB_VEC3* = 2
const RL_SHADER_ATTRIB_VEC4* = 3

// Defines
const RAYLIB_VERSION* = "4.2"
// Skipped define: __declspec(x)
// Skipped define: RLAPI
const PI* = 3.141592653589793
// Skipped define: DEG2RAD
// Skipped define: RAD2DEG
// Skipped define: RL_MALLOC(sz)
// Skipped define: RL_CALLOC(n,sz)
// Skipped define: RL_REALLOC(ptr,sz)
// Skipped define: RL_FREE(ptr)
// Skipped define: CLITERAL(type)
const LIGHTGRAY* = Color{ 200, 200, 200, 255 }
const GRAY* = Color{ 130, 130, 130, 255 }
const DARKGRAY* = Color{ 80, 80, 80, 255 }
const YELLOW* = Color{ 253, 249, 0, 255 }
const GOLD* = Color{ 255, 203, 0, 255 }
const ORANGE* = Color{ 255, 161, 0, 255 }
const PINK* = Color{ 255, 109, 194, 255 }
const RED* = Color{ 230, 41, 55, 255 }
const MAROON* = Color{ 190, 33, 55, 255 }
const GREEN* = Color{ 0, 228, 48, 255 }
const LIME* = Color{ 0, 158, 47, 255 }
const DARKGREEN* = Color{ 0, 117, 44, 255 }
const SKYBLUE* = Color{ 102, 191, 255, 255 }
const BLUE* = Color{ 0, 121, 241, 255 }
const DARKBLUE* = Color{ 0, 82, 172, 255 }
const PURPLE* = Color{ 200, 122, 255, 255 }
const VIOLET* = Color{ 135, 60, 190, 255 }
const DARKPURPLE* = Color{ 112, 31, 126, 255 }
const BEIGE* = Color{ 211, 176, 131, 255 }
const BROWN* = Color{ 127, 106, 79, 255 }
const DARKBROWN* = Color{ 76, 63, 47, 255 }
const WHITE* = Color{ 255, 255, 255, 255 }
const BLACK* = Color{ 0, 0, 0, 255 }
const BLANK* = Color{ 0, 0, 0, 0 }
const MAGENTA* = Color{ 255, 0, 255, 255 }
const RAYWHITE* = Color{ 245, 245, 245, 255 }
// Skipped define: MOUSE_LEFT_BUTTON
// Skipped define: MOUSE_RIGHT_BUTTON
// Skipped define: MOUSE_MIDDLE_BUTTON
// Skipped define: MATERIAL_MAP_DIFFUSE
// Skipped define: MATERIAL_MAP_SPECULAR
// Skipped define: SHADER_LOC_MAP_DIFFUSE
// Skipped define: SHADER_LOC_MAP_SPECULAR
// Skipped define: RMAPI
const EPSILON* = 0.000001
// Skipped define: MatrixToFloat(mat)
// Skipped define: Vector3ToFloat(vec)
const RLGL_VERSION* = "4.0"
// Skipped define: TRACELOG(level, ...)
// Skipped define: TRACELOGD(...)
// Skipped define: RL_REALLOC(n,sz)
// Skipped define: RL_FREE(p)
// Skipped define: RL_DEFAULT_BATCH_BUFFER_ELEMENTS
// Skipped define: RL_DEFAULT_BATCH_BUFFERS
// Skipped define: RL_DEFAULT_BATCH_DRAWCALLS
// Skipped define: RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS
// Skipped define: RL_MAX_MATRIX_STACK_SIZE
// Skipped define: RL_MAX_SHADER_LOCATIONS
// Skipped define: RL_CULL_DISTANCE_NEAR
// Skipped define: RL_CULL_DISTANCE_FAR
// Skipped define: RL_TEXTURE_WRAP_S
// Skipped define: RL_TEXTURE_WRAP_T
// Skipped define: RL_TEXTURE_MAG_FILTER
// Skipped define: RL_TEXTURE_MIN_FILTER
// Skipped define: RL_TEXTURE_FILTER_NEAREST
// Skipped define: RL_TEXTURE_FILTER_LINEAR
// Skipped define: RL_TEXTURE_FILTER_MIP_NEAREST
// Skipped define: RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR
// Skipped define: RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST
// Skipped define: RL_TEXTURE_FILTER_MIP_LINEAR
// Skipped define: RL_TEXTURE_FILTER_ANISOTROPIC
// Skipped define: RL_TEXTURE_WRAP_REPEAT
// Skipped define: RL_TEXTURE_WRAP_CLAMP
// Skipped define: RL_TEXTURE_WRAP_MIRROR_REPEAT
// Skipped define: RL_TEXTURE_WRAP_MIRROR_CLAMP
// Skipped define: RL_MODELVIEW
// Skipped define: RL_PROJECTION
// Skipped define: RL_TEXTURE
// Skipped define: RL_LINES
// Skipped define: RL_TRIANGLES
// Skipped define: RL_QUADS
// Skipped define: RL_UNSIGNED_BYTE
// Skipped define: RL_FLOAT
// Skipped define: RL_STREAM_DRAW
// Skipped define: RL_STREAM_READ
// Skipped define: RL_STREAM_COPY
// Skipped define: RL_STATIC_DRAW
// Skipped define: RL_STATIC_READ
// Skipped define: RL_STATIC_COPY
// Skipped define: RL_DYNAMIC_DRAW
// Skipped define: RL_DYNAMIC_READ
// Skipped define: RL_DYNAMIC_COPY
// Skipped define: RL_FRAGMENT_SHADER
// Skipped define: RL_VERTEX_SHADER
// Skipped define: RL_COMPUTE_SHADER
// Skipped define: RL_SHADER_LOC_MAP_DIFFUSE
// Skipped define: RL_SHADER_LOC_MAP_SPECULAR
