// TODO: The core_window_letterbox.um example is not working. RenderTexture issue?
import (
    "raylib"
    "std.um"
)

const windowWidth = 800
const windowHeight = 450
const gameScreenWidth = 640
const gameScreenHeight = 480

var colors:[10]raylib.Color
var target:raylib.RenderTexture

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
fn init() {
    // Enable config flags for resizable window and vertical synchro
    raylib.SetConfigFlags(raylib.FLAG_WINDOW_RESIZABLE/* | raylib.FLAG_VSYNC_HINT*/)
    raylib.InitWindow(windowWidth, windowHeight, "raylib-umka [core] example - window scale letterbox")
    raylib.SetWindowMinSize(320, 240)

    // Render texture initialization, used to hold the rendering result so we can easily resize it
    target = raylib.LoadRenderTexture(gameScreenWidth, gameScreenHeight)
    raylib.SetTextureFilter(target.texture, raylib.TEXTURE_FILTER_BILINEAR)  // Texture scale filter to use

    for i := 0; i < 10; i++ {
        colors[i] = raylib.Color{ raylib.GetRandomValue(100, 250), raylib.GetRandomValue(50, 150), raylib.GetRandomValue(10, 100), 255 }
    }

    raylib.SetTargetFPS(60)
    //--------------------------------------------------------------------------------------
}

fn MIN(a:real32, b:real32):real32 {
    if a < b {
        return a
    }
    return b
}

// Main game loop
fn update() {
    // Update
    //----------------------------------------------------------------------------------
    // Compute required framebuffer scaling
    var scale:real32 = MIN(real32(raylib.GetScreenWidth()) / real32(gameScreenWidth), real32(raylib.GetScreenHeight()) / real32(gameScreenHeight))

    if raylib.IsKeyPressed(raylib.KEY_SPACE) {
        // Recalculate random colors for the bars
        for i := 0; i < 10; i++ {
            colors[i] = raylib.Color{ raylib.GetRandomValue(100, 250), raylib.GetRandomValue(50, 150), raylib.GetRandomValue(10, 100), 255 }
        }
    }

    // Update virtual mouse (clamped mouse value behind game screen)
    var mouse:raylib.Vector2 = raylib.GetMousePosition()
    var virtualMouse:raylib.Vector2
    virtualMouse.x = (mouse.x - (real32(raylib.GetScreenWidth()) - (real32(gameScreenWidth) * scale)) * 0.5) / scale
    virtualMouse.y = (mouse.y - (real32(raylib.GetScreenHeight()) - (real32(gameScreenHeight)*scale)) * 0.5) / scale
    virtualMouse = raylib.Vector2Clamp(virtualMouse, raylib.Vector2{ 0, 0 }, raylib.Vector2{ gameScreenWidth, gameScreenHeight })

    // Apply the same transformation as the virtual mouse to the real mouse (i.e. to work with raygui)
    //SetMouseOffset(-(GetScreenWidth() - (gameScreenWidth*scale))*0.5f, -(GetScreenHeight() - (gameScreenHeight*scale))*0.5f)
    //SetMouseScale(1/scale, 1/scale)
    //----------------------------------------------------------------------------------

    // Draw
    //----------------------------------------------------------------------------------
    // Draw everything in the render texture, note this will not be rendered on screen, yet
    raylib.BeginTextureMode(target)
        raylib.ClearBackground(raylib.RAYWHITE)  // Clear render texture background color

        for i := 0; i < 10; i++ {
            var rect:raylib.Rectangle = raylib.Rectangle{0, (real32(gameScreenHeight) / 10.0) * real32(i), real32(gameScreenWidth), real32(gameScreenHeight) / 10.0}
            raylib.DrawRectangleRec(rect, colors[i])
            std.printf("Rect: %fx%f - %fx%f", rect.x, rect.y, rect.width, rect.height)
        }

        raylib.DrawText("If executed inside a window,\nyou can resize the window,\nand see the screen scaling!", 10, 25, 20, raylib.WHITE)
        // TODO: Add TextFormat
        //raylib.DrawText(raylib.TextFormat("Default Mouse: [%i , %i]", (int)mouse.x, (int)mouse.y), 350, 25, 20, GREEN)
        //raylib.DrawText(raylib.TextFormat("Virtual Mouse: [%i , %i]", (int)virtualMouse.x, (int)virtualMouse.y), 350, 55, 20, YELLOW)
    raylib.EndTextureMode()

    raylib.BeginDrawing()
        raylib.ClearBackground(raylib.BLACK)     // Clear screen background

        // Draw render texture to screen, properly scaled
        var rect1:raylib.Rectangle = raylib.Rectangle{ 0, 0, target.texture.width, -target.texture.height }
        var rect2:raylib.Rectangle = raylib.Rectangle{ (real32(raylib.GetScreenWidth()) - (real32(gameScreenWidth)*scale)) * 0.5, (real32(raylib.GetScreenHeight()) - (real32(gameScreenHeight)*scale)) * 0.5, real32(gameScreenWidth) * scale, real32(gameScreenHeight) * scale }

        raylib.DrawTexturePro(target.texture, rect1, rect2, raylib.Vector2{ 0, 0 }, 0.0, raylib.WHITE)
    raylib.EndDrawing()
    //--------------------------------------------------------------------------------------
}

fn close() {
    // De-Initialization
    //--------------------------------------------------------------------------------------
    raylib.UnloadRenderTexture(target)        // Unload render texture

    raylib.CloseWindow()                      // Close window and OpenGL context
    //--------------------------------------------------------------------------------------
}

fn main() {}
