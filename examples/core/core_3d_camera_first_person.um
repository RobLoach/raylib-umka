import "raylib"

const MAX_COLUMNS = 20
const screenWidth = 800
const screenHeight = 450
var camera:raylib.Camera3D

// Generates some random columns
var heights:[MAX_COLUMNS]real32
var positions:[MAX_COLUMNS]raylib.Vector3
var colors:[MAX_COLUMNS]raylib.Color

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
fn init() {
    raylib.InitWindow(screenWidth, screenHeight, "raylib [core] example - 3d camera first person")

    // Define the camera to look into our 3d world (position, target, up vector)
    camera.position = raylib.Vector3{ 4.0, 2.0, 4.0 }
    camera.target = raylib.Vector3{ 0.0, 1.8, 0.0 }
    camera.up = raylib.Vector3{ 0.0, 1.0, 0.0 }
    camera.fovy = 60
    camera.projection = raylib.CAMERA_PERSPECTIVE

    for i := 0; i < MAX_COLUMNS; i++ {
        heights[i] = raylib.GetRandomValue(1, 12)
        positions[i] = raylib.Vector3{ raylib.GetRandomValue(-15, 15), heights[i]/2, raylib.GetRandomValue(-15, 15) }
        colors[i] = raylib.Color{ raylib.GetRandomValue(20, 255), raylib.GetRandomValue(10, 55), 30, 255 }
    }

    raylib.SetCameraMode(camera, raylib.CAMERA_FIRST_PERSON) // Set a first person camera mode

    raylib.SetTargetFPS(60)                           // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------
}

fn update() {
    // Update
    //----------------------------------------------------------------------------------
    raylib.UpdateCamera(&camera)
    //----------------------------------------------------------------------------------

    // Draw
    //----------------------------------------------------------------------------------
    raylib.BeginDrawing()

        raylib.ClearBackground(raylib.RAYWHITE)

        raylib.BeginMode3D(camera)

            raylib.DrawPlane(raylib.Vector3{ 0, 0, 0 }, raylib.Vector2{ 32, 32 }, raylib.LIGHTGRAY) // Draw ground
            raylib.DrawCube(raylib.Vector3{ -16, 2.5, 0 }, 1, 5, 32, raylib.BLUE)     // Draw a blue wall
            raylib.DrawCube(raylib.Vector3{ 16, 2.5, 0 }, 1, 5, 32, raylib.LIME)      // Draw a green wall
            raylib.DrawCube(raylib.Vector3{ 0, 2.5, 16 }, 32, 5, 1, raylib.GOLD)      // Draw a yellow wall

            // Draw some cubes around
            for i := 0; i < MAX_COLUMNS; i++ {
                raylib.DrawCube(positions[i], 2, heights[i], 2, colors[i])
                raylib.DrawCubeWires(positions[i], 2, heights[i], 2, raylib.MAROON)
            }

        raylib.EndMode3D()

        raylib.DrawRectangle( 10, 10, 220, 70, raylib.Fade(raylib.SKYBLUE, 0.5))
        raylib.DrawRectangleLines( 10, 10, 220, 70, raylib.BLUE)

        raylib.DrawText("First person camera default controls:", 20, 20, 10, raylib.BLACK)
        raylib.DrawText("- Move with keys: W, A, S, D", 40, 40, 10, raylib.DARKGRAY)
        raylib.DrawText("- Mouse move to look around", 40, 60, 10, raylib.DARKGRAY)

    raylib.EndDrawing()
    //----------------------------------------------------------------------------------
}

fn close() {
    // De-Initialization
    //--------------------------------------------------------------------------------------
    raylib.CloseWindow()        // Close window and OpenGL context
    //--------------------------------------------------------------------------------------
}

fn main() {}
