/*******************************************************************************************
*
*   raylib [textures] example - Bunnymark
*
*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
*   BSD-like license that allows static linking with closed source software
*
*   Copyright (c) 2022 Rob Loach (@RobLoach)
*
********************************************************************************************/

import (
    "raylib"
    "std.um" // Using std.sprintf() instead of raylib.TextFormat()
)

const MAX_BUNNIES = 50000    // 50K bunnies limit

// This is the maximum amount of elements (quads) per batch
// NOTE: This value is defined in [rlgl] module and can be changed there
const MAX_BATCH_ELEMENTS = 8192

type (
    Bunny = struct {
        position: raylib.Vector2
        speed: raylib.Vector2
        color: raylib.Color
    }
)

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
fn main() {
    // Initialization
    //--------------------------------------------------------------------------------------
    const screenWidth = 800
    const screenHeight = 450

    raylib.InitWindow(screenWidth, screenHeight, "raylib-umka [textures] example - bunnymark")

    // Load bunny texture
    var texBunny:raylib.Texture = raylib.LoadTexture("resources/wabbit_alpha.png")

    //Bunny *bunnies = (Bunny *)malloc(MAX_BUNNIES*sizeof(Bunny))    // Bunnies array
    var bunnies:[MAX_BUNNIES]Bunny

    bunniesCount := 0           // Bunnies counter

    raylib.SetTargetFPS(60)               // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    for !raylib.WindowShouldClose() {    // Detect window close button or ESC key
        // Update
        //----------------------------------------------------------------------------------
        if (raylib.IsMouseButtonDown(raylib.MOUSE_BUTTON_LEFT)) {
            // Create more bunnies
            for i := 0; i < 100; i++ {
                if bunniesCount < MAX_BUNNIES {
                    bunnies[bunniesCount].position = raylib.GetMousePosition()
                    bunnies[bunniesCount].speed.x = raylib.GetRandomValue(-250, 250) / 60.0
                    bunnies[bunniesCount].speed.y = raylib.GetRandomValue(-250, 250) / 60.0
                    bunnies[bunniesCount].color = raylib.Color{ raylib.GetRandomValue(50, 240), raylib.GetRandomValue(80, 240), raylib.GetRandomValue(100, 240), 255 }
                    bunniesCount++
                }
            }
        }

        // Update bunnies
        for i := 0; i < bunniesCount; i++ {
            bunnies[i].position.x += bunnies[i].speed.x
            bunnies[i].position.y += bunnies[i].speed.y

            if ((bunnies[i].position.x + texBunny.width/2) > raylib.GetScreenWidth()) || ((bunnies[i].position.x + texBunny.width/2) < 0) {
                bunnies[i].speed.x *= -1.0
            }
            if ((bunnies[i].position.y + texBunny.height/2) > raylib.GetScreenHeight()) || ((bunnies[i].position.y + texBunny.height/2 - 40) < 0) {
                bunnies[i].speed.y *= -1.0
            }
        }
        //----------------------------------------------------------------------------------

        // Draw
        //----------------------------------------------------------------------------------
        raylib.BeginDrawing()

            raylib.ClearBackground(raylib.RAYWHITE)

            for i := 0; i < bunniesCount; i++ {
                // NOTE: When internal batch buffer limit is reached (MAX_BATCH_ELEMENTS),
                // a draw call is launched and buffer starts being filled again
                // before issuing a draw call, updated vertex data from internal CPU buffer is send to GPU...
                // Process of sending data is costly and it could happen that GPU data has not been completely
                // processed for drawing while new data is tried to be sent (updating current in-use buffers)
                // it could generates a stall and consequently a frame drop, limiting the number of drawn bunnies
                raylib.DrawTextureV(texBunny, bunnies[i].position, bunnies[i].color)
            }

            raylib.DrawRectangle(0, 0, screenWidth, 40, raylib.BLACK)

            // TODO: Replace std.sprintf() with raylib.TextFormat()
            raylib.DrawText(std.sprintf("bunnies: %i", bunniesCount), 120, 10, 20, raylib.GREEN)
            raylib.DrawText(std.sprintf("batched draw calls: %i", 1 + bunniesCount / MAX_BATCH_ELEMENTS), 320, 10, 20, raylib.MAROON)
            //raylib.DrawText(TextFormat("bunnies: %i", bunniesCount), 120, 10, 20, raylib.GREEN)
            //raylib.DrawText(TextFormat("batched draw calls: %i", 1 + bunniesCount/MAX_BATCH_ELEMENTS), 320, 10, 20, MAROON)

            raylib.DrawFPS(10, 10)

        raylib.EndDrawing()
        //----------------------------------------------------------------------------------
    }

    // De-Initialization
    //--------------------------------------------------------------------------------------
    //free(bunnies)              // Unload bunnies data array

    raylib.UnloadTexture(texBunny)    // Unload bunny texture

    raylib.CloseWindow()              // Close window and OpenGL context
    //--------------------------------------------------------------------------------------
}
